---
layout: default
title:  "设计模式系列(五)"
date:   2015-02-11 12:37:30
categories: 设计模式
---

# 行为型模式二组

## 解释器模式

解释：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。

好处：可以很容易地改变和拓展文法。

## 中介者模式

解释：用一个中介对象来封装一系列对象的交互，使得一系列对象不用相互引用，从而降低之间的耦合。

{% highlight java %}
   
    public abstract class Person {
    
        private Mediator mediator;
    
        private String type;
    
        public Mediator getMediator() {
            return mediator;
        }
    
        public String getType() {
            return type;
        }
    
        public void setType(String type) {
            this.type = type;
        }
    
        public void setMediator(Mediator mediator) {
            this.mediator = mediator;
        }
    
        public abstract void handler(String msg);
    }
    
    public interface Mediator {
        void send(String message,Person person);
    }
    
    public class Buyer extends Person{
    
        @Override
        public void handler(String msg) {
            System.out.println("buyer receive message: "+msg);
        }
    
    }
    
    public class Seller extends Person {
    
        @Override
        public void handler(String msg) {
            System.out.println("seller receiver message: "+msg);
        }
    }
    
    public class HouseMediator implements  Mediator{
        private Person buyer ;
        private Person seller;
    
        public Person getBuyer() {
            return buyer;
        }
    
        public void setBuyer(Person buyer) {
            this.buyer = buyer;
        }
    
        public Person getSeller() {
            return seller;
        }
    
        public void setSeller(Person seller) {
            this.seller = seller;
        }
    
        @Override
        public void send(String message, Person person) {
            if(person.getType()=="buyer"){
                seller.handler(message);
            }else {
                buyer.handler(message);
            }
        }
    }
    
    public class MainClass {
        public static void main(String[] args){
            Person buyer = new Buyer();
            buyer.setType("buyer");
            Person seller = new Seller();
            seller.setType("seller");
            HouseMediator houseMediator = new HouseMediator();
            houseMediator.setBuyer(buyer);
            houseMediator.setSeller(seller);
    
            buyer.setMediator(houseMediator);
            seller.setMediator(houseMediator);
    
            houseMediator.send("我要买房子",buyer);
            houseMediator.send("我要卖房子",seller);
        }
    }
{% endhighlight %}

## 访问者模式

解释：表示一个作用于某对象结构中的各元素的操作。它使得你可以在不改变各元素类的前提下定义作用与这些新元素的操作。

{% highlight java %}

    public interface Action {
        void getManConclusion(Person man);
        void getWomanConclusion(Person woman);
    }
    
    public interface Person {
        void accept(Action visitor);
    }
    
    public class Success implements Action {
    
        @Override
        public void getManConclusion(Person man) {
            String manName = man.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(manName+actionName+"时，背后多半有一个伟大的女人");
        }
    
        @Override
        public void getWomanConclusion(Person woman) {
            String womanName = woman.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(womanName+actionName+"时，背后多半有一个不成功的男人");
        }
    }
    
    public class Fail implements Action {
    
        @Override
        public void getManConclusion(Person man) {
            String manName = man.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(manName+actionName+"时,闷头喝酒谁也不用劝");
        }
    
        @Override
        public void getWomanConclusion(Person woman) {
            String womanName = woman.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(womanName+actionName+"时，眼泪汪汪谁也劝不了");
        }
    }
    
    public class Amativeness implements Action {
    
        @Override
        public void getManConclusion(Person man) {
            String manName = man.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(manName+actionName+"时,凡是不懂也要装懂");
        }
    
        @Override
        public void getWomanConclusion(Person woman) {
            String womanName = woman.getClass().getSimpleName();
            String actionName = this.getClass().getSimpleName();
            System.out.println(womanName+actionName+"时，遇事懂了也是不懂");
        }
    }
    
    public class Man implements Person {
    
        @Override
        public void accept(Action visitor) {
            visitor.getManConclusion(this);
        }
    }
    
    public class Woman implements Person {
    
        @Override
        public void accept(Action visitor) {
            visitor.getWomanConclusion(this);
        }
    }
    
    public class Objects {
        private List<Person> persons = new ArrayList<Person>();
    
        public void add(Person person){
            persons.add(person);
        }
    
        public void delete(Person person){
            persons.remove(person);
        }
    
        public void display(Action visitor){
            for(Person person:persons){
                person.accept(visitor);
            }
        }
    
    }
    
    public class MainClass {
    
        public static void main(String[] args){
            Objects o = new Objects();
            o.add(new Man());
            o.add(new Woman());
    
            Success s = new Success();
            o.display(s);
    
            Fail fail = new Fail();
            o.display(fail);
    
            Amativeness amativeness = new Amativeness();
            o.display(amativeness);
        }
    }

{% endhighlight %}

好处：适用与数据结构相对稳定的系统，将数据结构和作用于数据结构上的操作解耦。

## 策略模式

解释：定义算法家族，并分别封装起来，让他们之间能相互替换，而不影响到使用算法的用户。

{% highlight java %}

    public interface Strategy {
        void cal();
    }
    
    public class StrategyA implements Strategy {
        @Override
        public void cal() {
            System.out.println("算法A");
        }
    }
    
    public class StrategyB implements Strategy {
        @Override
        public void cal() {
            System.out.println("算法B");
        }
    }
    
    public class StrategyC implements Strategy {
        @Override
        public void cal() {
            System.out.println("算法C");
        }
    }
    
    public class Context {
    
        private Strategy strategy;
    
        public Context(Strategy strategy){
            this.strategy = strategy;
        }
    
        public void setStrategy(Strategy strategy) {
            this.strategy = strategy;
        }
    
        public void cal(){
            strategy.cal();
        }
    
    }
    
    public class MainClass {
        public static void main(String[] args){
            Strategy strategy = new StrategyA();
            Context context = new Context(strategy);
            context.cal();
            context.setStrategy(new StrategyB());
            context.cal();
            context.setStrategy(new StrategyC());
            context.cal();
        }
    }

{% endhighlight %}

## 备忘录模式

解释：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。

{% highlight java %}

    public class Memento {
        private String state;
    
        public String getState() {
            return state;
        }
    
        public void setState(String state) {
            this.state = state;
        }
    }
    
    public class Originator {
        private String state;
    
        public String getState() {
            return state;
        }
    
        public void setState(String state) {
            this.state = state;
        }
    
        public Memento createMemento(){
            Memento memento = new Memento();
            memento.setState(state);
            return memento;
        }
    
        public void setMemento(Memento memento){
            this.setState(memento.getState());
        }
    
        public void show(){
            System.out.println("State:"+state);
        }
    }
    
    public class Caretaker {
        private Memento memento;
    
        public Memento getMemento() {
            return memento;
        }
    
        public void setMemento(Memento memento) {
            this.memento = memento;
        }
    }
    
    public class MainClass {
    
        public static void main(String[] args){
            Originator originator = new Originator();
            originator.setState("On");
            originator.show();
    
            Memento memento = originator.createMemento();
            Caretaker caretaker = new Caretaker();
            caretaker.setMemento(memento);
            originator.setState("Off");
            originator.show();
    
            originator.setMemento(caretaker.getMemento());
            originator.show();
        }
    }

{% endhighlight %}
## 迭代器模式

解释：提供一个方法顺序访问一个聚合对象中各个元素，而不暴露该对象的内部表示。

{% highlight java %}

    public interface Iterator {
        Object getFirst();
        Object next();
        Object currentItem();
        boolean isDone();
    }
    
    public interface Aggregate {
        Iterator iterator();
    }
    
    public class ConcreteIterator implements Iterator {
        private ConcreteAggregate aggregate;
        private int index;
        public ConcreteIterator(ConcreteAggregate aggregate) {
            this.aggregate = aggregate;
            index = 0;
        }
    
    
        @Override
        public Object getFirst() {
            return aggregate.getList().get(0);
        }
    
        @Override
        public Object next() {
            return aggregate.getList().get(index++);
        }
    
        @Override
        public Object currentItem() {
            return aggregate.getList().get(index);
        }
    
        @Override
        public boolean isDone() {
            if(index<aggregate.getList().size()){
                return false;
            }
            return true;
        }
    }
    
    public class ConcreteAggregate implements Aggregate {
        private List<Object> list = new ArrayList<Object>();
    
        public List<Object> getList() {
            return list;
        }
    
        public void setList(List<Object> list) {
            this.list = list;
        }
    
        @Override
        public Iterator iterator() {
            return new ConcreteIterator(this);
        }
    
        public int getCount(){
            return list.size();
        }
    
    }
    
    public class MainClass {
        public static void main(String[] args){
            ConcreteAggregate aggregate = new ConcreteAggregate();
    
            ArrayList<Object> list = new ArrayList<Object>();
            list.add("one");
            list.add("two");
            list.add("three");
            list.add("four");
            list.add("five");
    
            aggregate.setList(list);
    
            Iterator iterator = aggregate.iterator();
            while(!iterator.isDone()){
                System.out.println(iterator.next());
            }
    
        }
    }
{% endhighlight %}