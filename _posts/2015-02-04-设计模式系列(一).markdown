---
layout: post
title:  "设计模式系列(一)"
date:   2015-02-04 22:36:30
categories: jekyll update
---


# 设计模式原则


## 单一职责原则

解释：就一个类而言，应该仅有一个引起他变化的原因

原因：如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力。这种耦合会导致设计的脆弱，当变化发生时，设计会遭受到意想不到的破坏。

## 开放封闭原则

解释：软件实体(类、模块、函数等),应该可以拓展,但不可修改。

原因：无论模块是多么封闭，都会存在一些无法对之封闭的变化。既然不能完全封闭，设计人员必须对于他设计的模块对于哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离这些变化。

## 依赖倒转原则

解释：
	
	A.高层模块不应该依赖底层模块。两个都应该依赖抽象。
	
	B.抽象不应该依赖细节。细节应该依赖抽象。


## 里氏替换原则


解释：一个软件实体如果使用的是一个父类的话，那么一定适用其子类，而且他察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成他的子类，程序的行为没有变化。

原因：由于子类的可替代性才使得使用父类类型的模块在无需修改的情况下就可以拓展。

## 迪米特法则

解释：如果两个类不必彼此直接通信，那么这两个类就不必发生直接的相互作用。如果其中一个类需要调用另一个类的某个方法的，可以通过第三者转发这
个调用。

原因：强调类之间的松耦合。类之间的耦合越弱，越有利于复用。一个处在弱耦合的类被修改，不会对有关系的类造成波及。